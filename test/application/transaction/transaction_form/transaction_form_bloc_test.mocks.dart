// Mocks generated by Mockito 5.1.0 from annotations
// in kantor_tukan/test/application/transaction/transaction_form/transaction_form_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:kantor_tukan/domain/internet/i_internet_connection_checker.dart'
    as _i8;
import 'package:kantor_tukan/domain/transaction/i_transaction_repository.dart'
    as _i3;
import 'package:kantor_tukan/domain/transaction/transaction.dart' as _i7;
import 'package:kantor_tukan/domain/transaction/transaction_failure.dart'
    as _i5;
import 'package:kt_dart/kt.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [ITransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITransactionRepository extends _i1.Mock
    implements _i3.ITransactionRepository {
  MockITransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i5.TransactionFailure, _i6.KtList<_i7.Transaction>>>
      watchAll() => (super.noSuchMethod(Invocation.method(#watchAll, []),
          returnValue: Stream<
              _i2.Either<_i5.TransactionFailure,
                  _i6.KtList<_i7.Transaction>>>.empty()) as _i4.Stream<
          _i2.Either<_i5.TransactionFailure, _i6.KtList<_i7.Transaction>>>);
  @override
  _i4.Stream<_i2.Either<_i5.TransactionFailure, _i6.KtList<_i7.Transaction>>>
      watchAccepted() =>
          (super.noSuchMethod(Invocation.method(#watchAccepted, []),
              returnValue: Stream<
                  _i2.Either<_i5.TransactionFailure,
                      _i6.KtList<_i7.Transaction>>>.empty()) as _i4.Stream<
              _i2.Either<_i5.TransactionFailure, _i6.KtList<_i7.Transaction>>>);
  @override
  _i4.Stream<_i2.Either<_i5.TransactionFailure, _i6.KtList<_i7.Transaction>>>
      watchPending() =>
          (super.noSuchMethod(Invocation.method(#watchPending, []),
              returnValue: Stream<
                  _i2.Either<_i5.TransactionFailure,
                      _i6.KtList<_i7.Transaction>>>.empty()) as _i4.Stream<
              _i2.Either<_i5.TransactionFailure, _i6.KtList<_i7.Transaction>>>);
  @override
  _i4.Stream<_i2.Either<_i5.TransactionFailure, _i6.KtList<_i7.Transaction>>>
      watchDecline() =>
          (super.noSuchMethod(Invocation.method(#watchDecline, []),
              returnValue: Stream<
                  _i2.Either<_i5.TransactionFailure,
                      _i6.KtList<_i7.Transaction>>>.empty()) as _i4.Stream<
              _i2.Either<_i5.TransactionFailure, _i6.KtList<_i7.Transaction>>>);
  @override
  _i4.Future<_i2.Either<_i5.TransactionFailure, _i2.Unit>> create(
          _i7.Transaction? transaction) =>
      (super.noSuchMethod(Invocation.method(#create, [transaction]),
              returnValue:
                  Future<_i2.Either<_i5.TransactionFailure, _i2.Unit>>.value(
                      _FakeEither_0<_i5.TransactionFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.TransactionFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.TransactionFailure, _i2.Unit>> delete(
          _i7.Transaction? transaction) =>
      (super.noSuchMethod(Invocation.method(#delete, [transaction]),
              returnValue:
                  Future<_i2.Either<_i5.TransactionFailure, _i2.Unit>>.value(
                      _FakeEither_0<_i5.TransactionFailure, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.TransactionFailure, _i2.Unit>>);
}

/// A class which mocks [IInternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockIInternetConnectionChecker extends _i1.Mock
    implements _i8.IInternetConnectionChecker {
  MockIInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> hasConnection() =>
      (super.noSuchMethod(Invocation.method(#hasConnection, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
